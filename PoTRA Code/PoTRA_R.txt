## Purpose: To troubleshoot PoTRA code and make improvements where possible ##
## Contributor: MLinan 
## Helpful links: https://cran.r-project.org/web/packages/import/vignettes/import.html
##
##
## History of error messages
## 1 :: Add package root its needed for imports (important:package ‘root’ is not available (for R Under development))
## 2 :: Error: Could not find package root

PoTRA.comb <- function(mydata,genelist,Num.sample.normal,Num.sample.case,Pathway.database, PR.quantile) {
 ########code not used########
 # require(BiocGenerics)
 # require(graph)
 # require(graphite)
 # require(igraph)https://github.com/GenomicsPrograms/PoTRA/blob/master/PoTRA%20Code/PoTRA_R.txt
 ###############################
 
 #### New code added by ML on 3.16.2018 ###
 ## Will be tested today ##
 devtools::install_deps(deps = TRUE)
 #devtools::load_all()
 
 devtools::use_package("BiocGenerics", type = "Imports", pkg = ".")
 devtools::use_package("graph", type = "Imports", pkg = ".")
 devtools::use_package("graphite", type = "Imports", pkg = ".")
 devtools::use_package("igraph", type = "Imports", pkg = ".")
 devtools::use_package("org.Hs.eg.db", type = "Imports", pkg = ".") 
  
 import::from(graphite, humanReactome, humanKEGG, humanBiocarta, .into= graphite)
 import::into("", humanReactome, humanKEGG, humanBiocarta, .from = graphite)
 
 
 ###########################################
  
  Fishertest<-c()
  TheNumOfHubGene.normal<-c()
  TheNumOfHubGene.case<-c()
  E.normal<-c()
  E.case<-c()
  length.pathway<-c()
  
  humanReactome <- pathways("hsapiens", "reactome")
  humanBiocarta <- pathways("hsapiens", "biocarta")
  humanKEGG <- pathways("hsapiens", "kegg")
  
  for (x in 1:length(Pathway.database)){
    print(x)
    p0 <-Pathway.database[[x]]
    p <- convertIdentifiers(p0, "entrez")
    g<-pathwayGraph(p) 
    nodelist<-nodes(g)
    graph.path<-igraph.from.graphNEL(g)
    graph.path<-as.undirected(graph.path)    
    length.intersect<-length(intersect(unlist(nodelist),unlist(genelist)))
    
    length.pathway[x]<-length.intersect
    
    graph.path<-induced_subgraph(graph.path, as.character(intersect(unlist(nodelist),unlist(genelist))))
   
    ####code added by ML 3.15.2018 #######
    print("Progress.......Setting Up")    
    
    if (length.intersect<5){
      next
    }else{
      
      #collect expression data of genes for a specific pathway across normal and tumor samples.
   
    ####code added by ML 3.15.2018 #######
    print("Progress.......Collecting expression data of genes for a specific pathway across normal and tumor samples")  
    
      path<-data.frame(matrix(0,length.intersect,(Num.sample.normal+Num.sample.case)))
      a<- c()
      
      for (j in 1:length.intersect){
        a[j]<-intersect(unlist(nodelist),unlist(genelist))[j]  
        
        path[j,]<-mydata[which(genelist==a[j]),]  #collect expression data of genes for a specific pathway across normal and tumor samples.
      }
      
      ##Construct a gene-gene network for normal samples and calculate PageRank values for each gene in this network.
    
    ####code added by ML 3.15.2018 #######
     print("Progress.......Constructing a gene-gene network for normal samples and calculate PageRank values for each gene in this network")
      
      
      cor.normal <- apply(path[,1:Num.sample.normal], 1, function(x) { apply(path[,1:Num.sample.normal], 1, function(y) { cor.test(x,y)[[3]] })})
      
      cor.normal<-as.matrix(cor.normal) 
      cor.normal.adj<-matrix(p.adjust(cor.normal,method="fdr"),length.intersect,length.intersect)
      
      cor.normal.adj[ cor.normal.adj > 0.05 ] <- 0
      cor.normal.adj[ is.na(cor.normal.adj)] <- 0
      diag(cor.normal.adj) <- 0
      
      colnames(cor.normal.adj)<-intersect(unlist(nodelist),unlist(genelist))
      rownames(cor.normal.adj)<-intersect(unlist(nodelist),unlist(genelist))
      
      graph.normal<-graph.adjacency(cor.normal.adj,weighted=TRUE,mode="undirected")
      E.normal[x]<-length(E(graph.normal))
      PR.normal<-page.rank(graph.normal,direct=FALSE)$vector
      
      graph.union.normal<- intersection(graph.normal,graph.path)
      E.union.normal[x]<- length(E(graph.union.normal))
      PR.union.normal<-page.rank(graph.union.normal,direct=FALSE)$vector
      
      ##Construct a gene-gene network for tumor samples and calculate PageRank values for each gene in this network.
     
     ####code added by ML 3.15.2018 #######
     print("Progress.......Constructing a gene-gene network for tumor samples and calculate PageRank values for each gene in this network")
     
     
      cor.case <- apply(path[,(Num.sample.normal+1):(Num.sample.normal+Num.sample.case)], 1, function(x) { apply(path[,(Num.sample.normal+1):(Num.sample.normal+Num.sample.case)], 1, function(y) { cor.test(x,y)[[3]] })})
      
      cor.case<-as.matrix(cor.case) 
      cor.case.adj<-matrix(p.adjust(cor.case,method="fdr"),length.intersect,length.intersect)
      
      cor.case.adj[ cor.case.adj > 0.05 ] <- 0
      cor.case.adj[ is.na(cor.case.adj)] <- 0
      diag(cor.case.adj) <- 0
      
      colnames(cor.case.adj)<-intersect(unlist(nodelist),unlist(genelist))
      rownames(cor.case.adj)<-intersect(unlist(nodelist),unlist(genelist))
      
      graph.case<-graph.adjacency(cor.case.adj,weighted=TRUE,mode="undirected")
      E.case[x]<-length(E(graph.case))
      PR.case<-page.rank(graph.case,direct=FALSE)$vector
      
      graph.union.case<- intersection(graph.case,graph.path)
      E.union.case[x]<- length(E(graph.union.case))
      PR.union.case<-page.rank(graph.union.case,direct=FALSE)$vector
      ############################
      matrix.HCC<- matrix("NA",2*length.intersect,2)
      rownames(matrix.HCC)<-as.character(c(PR.union.normal,PR.union.case))
      colnames(matrix.HCC)<-c("Disease_status","PageRank")
      
      matrix.HCC[,1]<-c(rep("Normal",length.intersect), rep("Cancer",length.intersect))
      
      loc.largePR<-which(as.numeric(rownames(matrix.HCC))>=quantile(PR.union.normal,PR.quantile))
      loc.smallPR<-which(as.numeric(rownames(matrix.HCC))<quantile(PR.union.normal,PR.quantile))
      
      matrix.HCC[loc.largePR,2]<-"large_PageRank"
      matrix.HCC[loc.smallPR,2]<-"small_PageRank"
      
      table.HCC<-list(1,2)
      names(table.HCC)<-c("Disease_status","PageRank")
      
      table.HCC$Disease_status<-matrix("NA",2*length.intersect,2)
      table.HCC$PageRank<-matrix("NA",2*length.intersect,2)
      
      table.HCC$Disease_status<-matrix.HCC[,1]
      table.HCC$PageRank<-matrix.HCC[,2]
      
      cont.HCC<-table(table.HCC$Disease_status,table.HCC$PageRank)
      TheNumOfHubGene.normal[x]<-cont.HCC[2]
      TheNumOfHubGene.case[x]<-cont.HCC[1]
      
      
      ####code added by ML 3.15.2018 #######
      print("Progress.......Applying Fisher's Exact and Kolmogorov Smirnov Test")
      
      
      if (dim(cont.HCC)[1]!=dim(cont.HCC)[2]){
        Fishertest[x]<-1
      }else{
        Fishertest[x]<-fisher.test(cont.HCC)$p.value
      }
      
      kstest[x]<-ks.test(PR.union.normal,PR.union.case)$p.value
      
      if (E.union.normal[x]<E.union.case[x]){
        Fishertest[x]<-1
        kstest[x]<-1
      }else{
        Fishertest[x]<-Fishertest[x]
        kstest[x]<-kstest[x]
      }
      ############################################
    }
  }
  

      ####code added by ML 3.15.2018 #######
      print("Progress.......Preparing Results")
      return(list(Fishertest.p.value=Fishertest,KStest.p.value=kstest,LengthOfPathway=length.pathway,TheNumberOfHubGenes.normal=TheNumOfHubGene.normal,TheNumOfHubGene.case=TheNumOfHubGene.case,TheNumberOfEdges.normal=E.union.normal,TheNumberOfEdges.case=E.union.case))
}






PoTRA.cor <- function(mydata,genelist,Num.sample.normal,Num.sample.case,Pathway.database, PR.quantile) {
 ##### Code will not be used #####
 # require(BiocGenerics)
 # require(graph)
 # require(graphite)
 # require(igraph)
 ####################################
  
 #### New code added by ML on 3.16.2018 ###
 ## Will be tested today ##
 
 devtools::install_deps(deps = TRUE)
 devtools::load_all()
 
 devtools::use_package("BiocGenerics", type = "Imports", pkg = ".")
 devtools::use_package("graph", type = "Imports", pkg = ".")
 devtools::use_package("graphite", type = "Imports", pkg = ".")
 devtools::use_package("igraph", type = "Imports", pkg = ".")
 devtools::use_package("org.Hs.eg.db", type = "Imports", pkg = ".") 
 import::from(graphite, humanReactome, humanKEGG, humanBiocarta)
 import::into("", humanReactome, humanKEGG, humanBiocarta, .from = graphite)
 
 ###########################################
 
 
  Fishertest<-c()
  TheNumOfHubGene.normal<-c()
  TheNumOfHubGene.case<-c()
  E.normal<-c()
  E.case<-c()
  length.pathway<-c()
  
  humanReactome <- pathways("hsapiens", "reactome")
  humanBiocarta <- pathways("hsapiens", "biocarta")
  humanKEGG <- pathways("hsapiens", "kegg")
  
  for (x in 1:length(Pathway.database)){
    print(x)
    p0 <-Pathway.database[[x]]
    p <- convertIdentifiers(p0, "entrez")
    g<-pathwayGraph(p) 
    nodelist<-nodes(g)
    graph.path<-igraph.from.graphNEL(g)    
    length.intersect<-length(intersect(unlist(nodelist),unlist(genelist)))
    
    length.pathway[x]<-length.intersect
    
    graph.path<-induced_subgraph(graph.path, as.character(intersect(unlist(nodelist),unlist(genelist))))
     ####code added by ML 3.15.2018 #######
     print("Progress.......Setting Up")
     
    if (length.intersect<5){
      next
    }else{
      
      #collect expression data of genes for a specific pathway across normal and tumor samples.
     
      
      
      path<-data.frame(matrix(0,length.intersect,(Num.sample.normal+Num.sample.case)))
      a<- c()
      
      for (j in 1:length.intersect){
        a[j]<-intersect(unlist(nodelist),unlist(genelist))[j]  
        
        path[j,]<-mydata[which(genelist==a[j]),]  #collect expression data of genes for a specific pathway across normal and tumor samples.
      }
      
      ##Construct a gene-gene network for normal samples and calculate PageRank values for each gene in this network.
     ####code added by ML 3.15.2018 #######
     print("Progress.......Construct a gene-gene network for normal samples and calculate PageRank values for each gene in this network")
     
     
      cor.normal <- apply(path[,1:Num.sample.normal], 1, function(x) { apply(path[,1:Num.sample.normal], 1, function(y) { cor.test(x,y)[[3]] })})
      
      cor.normal<-as.matrix(cor.normal) 
      
      cor.normal.adj<-matrix(p.adjust(cor.normal,method="fdr"),length.intersect,length.intersect)
      
      cor.normal.adj[ cor.normal.adj > 0.05 ] <- 0
      cor.normal.adj[ is.na(cor.normal.adj)] <- 0
      diag(cor.normal.adj) <- 0
      graph.normal<-graph.adjacency(cor.normal.adj,weighted=TRUE,mode="undirected")
      E.normal[x]<-length(E(graph.normal))
      
      PR.normal<-page.rank(graph.normal,direct=FALSE)$vector
      
      ##Construct a gene-gene network for tumor samples and calculate PageRank values for each gene in this network.
     ####code added by ML 3.15.2018 #######
     print("Progress.......Constructing a gene-gene network for tumor samples and calculate PageRank values for each gene in this network")
      
      
      
      cor.case <- apply(path[,(Num.sample.normal+1):(Num.sample.normal+Num.sample.case)], 1, function(x) { apply(path[,(Num.sample.normal+1):(Num.sample.normal+Num.sample.case)], 1, function(y) { cor.test(x,y)[[3]] })})
      
      cor.case<-as.matrix(cor.case) 
      cor.case.adj<-matrix(p.adjust(cor.case,method="fdr"),length.intersect,length.intersect)
      
      cor.case.adj[ cor.case.adj > 0.05 ] <- 0
      cor.case.adj[ is.na(cor.case.adj)] <- 0
      diag(cor.case.adj) <- 0
      graph.case<-graph.adjacency(cor.case.adj,weighted=TRUE,mode="undirected")
      E.case[x]<-length(E(graph.case))
      
      PR.case<-page.rank(graph.case,direct=FALSE)$vector
      
      matrix.HCC<- matrix("NA",2*length.intersect,2)
      rownames(matrix.HCC)<-as.character(c(PR.normal,PR.case))
      colnames(matrix.HCC)<-c("Disease_status","PageRank")
      
      matrix.HCC[,1]<-c(rep("Normal",length.intersect), rep("Cancer",length.intersect))
      
      loc.largePR<-which(as.numeric(rownames(matrix.HCC))>=quantile(PR.normal,PR.quantile))
      loc.smallPR<-which(as.numeric(rownames(matrix.HCC))<quantile(PR.normal,PR.quantile))
      
      matrix.HCC[loc.largePR,2]<-"large_PageRank"
      matrix.HCC[loc.smallPR,2]<-"small_PageRank"
      
      table.HCC<-list(1,2)
      names(table.HCC)<-c("Disease_status","PageRank")
      
      table.HCC$Disease_status<-matrix("NA",2*length.intersect,2)
      table.HCC$PageRank<-matrix("NA",2*length.intersect,2)
      
      table.HCC$Disease_status<-matrix.HCC[,1]
      table.HCC$PageRank<-matrix.HCC[,2]
      
      cont.HCC<-table(table.HCC$Disease_status,table.HCC$PageRank)
      TheNumOfHubGene.normal[x]<-cont.HCC[2]
      TheNumOfHubGene.case[x]<-cont.HCC[1]
      
       ####code added by ML 3.15.2018 #######
      print("Progress.......Applying Fisher's Exact and Kolmogorov Smirnov Tests")

      if (dim(cont.HCC)[1]!=dim(cont.HCC)[2]){
        Fishertest[x]<-1
      }else{
        Fishertest[x]<-fisher.test(cont.HCC)$p.value
      }
      kstest[x]<-ks.test(PR.normal,PR.case)$p.value
      
      if (E.normal[x]<E.case[x]){
        Fishertest[x]<-1
        kstest[x]<-1
      }else{
        Fishertest[x]<-Fishertest[x]
        kstest[x]<-kstest[x]
      }
      ################################
    }
  }
    ####code added by ML 3.15.2018 #######
    print("Progress.......Preparing Results")
 return(list(Fishertest.p.value=Fishertest,KStest.p.value=kstest,LengthOfPathway=length.pathway,TheNumberOfHubGenes.normal=TheNumOfHubGene.normal,TheNumOfHubGene.case=TheNumOfHubGene.case,TheNumberOfEdges.normal=E.normal,TheNumberOfEdges.case=E.case))
}







overlayplot<-function(mydata,genelist,Num.sample.normal,Num.sample.case,Pathway.database) {
 ## Code will not be used ### 
 # require(BiocGenerics)
 # require(graph)
 # require(graphite)
 # require(igraph)
  
  
 #### New code added by ML on 3.16.2018 ###
 ## Will be tested today ##
 devtools::install_deps(deps = TRUE)
 devtools::load_all()
 
 devtools::use_package("BiocGenerics", type = "Imports", pkg = ".")
 devtools::use_package("graph", type = "Imports", pkg = ".")
 devtools::use_package("graphite", type = "Imports", pkg = ".")
 devtools::use_package("igraph", type = "Imports", pkg = ".")
 devtools::use_package("org.Hs.eg.db", type = "Imports", pkg = ".") 
 import::from(graphite, humanReactome, humanKEGG, humanBiocarta)
 import::into("", humanReactome, humanKEGG, humanBiocarta, .from = graphite)
 
 ###########################################
 ###########################################
  
  length.pathway<-c()
  
  humanReactome <- pathways("hsapiens", "reactome")
  humanBiocarta <- pathways("hsapiens", "biocarta")
  humanKEGG <- pathways("hsapiens", "kegg")
  
  plot.multi.dens <- function(s)
  {
    junk.x = NULL
    junk.y = NULL
    for(i in 1:length(s))
    {
      junk.x = c(junk.x, density(s[[i]])$x)
      junk.y = c(junk.y, density(s[[i]])$y)
    }
    xr <- range(junk.x)
    yr <- range(junk.y)
    plot(density(s[[1]]), xlim = xr, ylim = yr, main = "")
    for(i in 1:length(s))
    {
      lines(density(s[[i]]), xlim = xr, ylim = yr, col = i)
    }
  }
  ####code added by ML 3.15.2018 #######
  print("Progress.......Setting Up")
  
  p0 <-Pathway.database
  p <- convertIdentifiers(p0, "entrez")
  g<-pathwayGraph(p) 
  nodelist<-nodes(g)
  graph.path<-igraph.from.graphNEL(g)    
  length.intersect<-length(intersect(unlist(nodelist),unlist(genelist)))
  
  length.pathway<-length(nodelist)
  
  #collect expression data of genes for a specific pathway across normal and tumor samples.
 
  ####code added by ML 3.15.2018 #######
  print("Progress.......Collecting expression data of genes for a specific pathway across normal and tumor samples")
  
  
  path<-data.frame(matrix(200,length.intersect,(Num.sample.normal+Num.sample.case)))
  a<- c()
  
  for (j in 1:length.intersect){
    a[j]<-intersect(unlist(nodelist),unlist(genelist))[j]  
    
    path[j,]<-mydata[which(genelist==a[j]),]  #collect expression data of genes for a specific pathway across normal and tumor samples.
  }
  
  ##Construct a gene-gene network for normal samples and calculate PageRank values for each gene in this network.
  
  ####code added by ML 3.15.2018 #######
  print("Progress.......Constructing a gene-gene network for normal samples and calculate PageRank values for each gene in this network")
  
  
  cor.normal <- apply(path[,1:Num.sample.normal], 1, function(x) { apply(path[,1:Num.sample.normal], 1, function(y) { cor.test(x,y)[[3]] })})
  
  cor.normal<-as.matrix(cor.normal) 
  
  cor.normal.adj<-matrix(p.adjust(cor.normal,method="fdr"),length.intersect,length.intersect)
  
  cor.normal.adj[ cor.normal.adj > 0.05 ] <- 0
  cor.normal.adj[ is.na(cor.normal.adj)] <- 0
  diag(cor.normal.adj) <- 0
  graph.normal<-graph.adjacency(cor.normal.adj,weighted=TRUE,mode="undirected")
  
  PR.normal<-page.rank(graph.normal,direct=FALSE)
  
  ##Construct a gene-gene network for tumor samples and calculate PageRank values for each gene in this network.
   ####code added by ML 3.15.2018 #######
  print("Progress.......Constructing a gene-gene network for tumor samples and calculate PageRank values for each gene in this network")
  
  
  cor.case <- apply(path[,(Num.sample.normal+1):(Num.sample.normal+Num.sample.case)], 1, function(x) { apply(path[,(Num.sample.normal+1):(Num.sample.normal+Num.sample.case)], 1, function(y) { cor.test(x,y)[[3]] })})
  
  cor.case<-as.matrix(cor.case) 
  cor.case.adj<-matrix(p.adjust(cor.case,method="fdr"),length.intersect,length.intersect)
  
  cor.case.adj[ cor.case.adj > 0.05 ] <- 0
  cor.case.adj[ is.na(cor.case.adj)] <- 0
  diag(cor.case.adj) <- 0
  graph.case<-graph.adjacency(cor.case.adj,weighted=TRUE,mode="undirected")
  
  ####code added by ML 3.15.2018 #######
  print("Progress.......Preparing Results")
  
  PR.case<-page.rank(graph.case,direct=FALSE)
  
  PoTRA.plot<-plot.multi.dens(list(PR.normal$vector,PR.case$vector))
}
